import os
import shutil
import re
import json
import tempfile
import threading
import datetime
from pathlib import Path
from typing import Dict, Any, Callable, Optional, List

import customtkinter as ctk
from tkinter import filedialog
import pandas as pd

try:
    import win32com.client as win32
    HAS_WIN32 = True
except ImportError:
    HAS_WIN32 = False

# --- Constants ---
APP_NAME = "SuperScript"
APP_CONFIG_DIR = Path.home() / f".{APP_NAME.lower()}"
CONFIG_FILE = APP_CONFIG_DIR / "file_organizer_config.json"
SIZES_JSON_FILE = APP_CONFIG_DIR / "sizes.json"
IMAGE_EXTENSIONS = [
    ".jpg", ".jpeg", ".png", ".bmp", ".gif", ".tiff", ".webp", ".svg", ".ico"
]
DEFAULT_SIZES = {
    "41 —Ä": 1211561, "41.5 —Ä": 1211562, "42 —Ä": 1211563, "42.5 —Ä": 1211564,
    "43 —Ä": 1211565, "43.5 —Ä": 1211566, "44 —Ä": 1211567, "44.5 —Ä": 1211568,
}

# --- Backend Logic ---

class ConfigManager:
    """Handles loading and saving of the application configuration."""

    @staticmethod
    def _ensure_config_dir():
        APP_CONFIG_DIR.mkdir(parents=True, exist_ok=True)

    @staticmethod
    def load_config() -> Dict[str, Any]:
        if CONFIG_FILE.exists():
            try:
                with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                    return json.load(f)
            except (json.JSONDecodeError, FileNotFoundError):
                print(f"Error loading config file: {CONFIG_FILE}")
                return {}
        return {}

    @staticmethod
    def save_config(config: Dict[str, Any]) -> None:
        try:
            ConfigManager._ensure_config_dir()
            with open(CONFIG_FILE, "w", encoding="utf-8") as f:
                json.dump(config, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"Error saving config: {e}")


class Logger:
    """Manages logging to the GUI's text widget."""

    def __init__(self, output_widget: ctk.CTkTextbox):
        self.output_widget = output_widget

    def log(self, message: str, level: str = "info") -> None:
        if not self.output_widget:
            return
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}\n"

        self.output_widget.configure(state="normal")
        self.output_widget.insert("end", formatted_message, level)
        self.output_widget.configure(state="disabled")
        self.output_widget.see("end")

    def info(self, message: str) -> None:
        self.log(message, "info")

    def success(self, message: str) -> None:
        self.log(f"‚úì {message}", "success")

    def warning(self, message: str) -> None:
        self.log(f"‚ö† {message}", "warning")

    def error(self, message: str) -> None:
        self.log(f"‚úó {message}", "error")


class FileOperations:
    """A collection of static methods for performing file system operations."""

    @staticmethod
    def _sanitize_folder_name(name: str) -> str:
        return re.sub(r'[?:"<>|*]', "", name).strip()

    @staticmethod
    def create_folders_from_list(
        base_path_str: str, folder_list_str: str, prefix: str, suffix: str,
        use_numbering: bool, start_num: int, padding: int,
        logger: Logger, stop_event: threading.Event,
        status_callback: Callable[[str, int], None], dry_run: bool = False
    ) -> int:
        op_prefix = "[DRY RUN] " if dry_run else ""
        op_name = "–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫"
        logger.info(f"{op_prefix}üèóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: {op_name}")
        if not dry_run:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫–∏ –Ω–∞ –¥–∏—Å–∫–µ!")

        base_path = Path(base_path_str)
        logger.info(f"–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_path}")

        folder_names = [name.strip() for name in folder_list_str.strip().split("\n") if name.strip()]

        if not folder_names:
            logger.warning("–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø—É—Å—Ç. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
            status_callback("–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø—É—Å—Ç.", 0)
            return 0

        created_count = 0
        total_folders = len(folder_names)
        try:
            for i, name in enumerate(folder_names):
                if stop_event.is_set(): break
                progress = int((i + 1) / total_folders * 100)
                status_callback(f"{op_prefix}–°–æ–∑–¥–∞–Ω–∏–µ: {name}", progress)

                path_parts = [FileOperations._sanitize_folder_name(part) for part in re.split(r"[\\/]", name)]
                if not any(path_parts):
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –∏–º—è '{name}' —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
                    continue
                
                number_str = str(i + start_num).zfill(padding) + "_" if use_numbering else ""
                path_parts[-1] = f"{prefix}{number_str}{path_parts[-1]}{suffix}"
                final_path = base_path.joinpath(*path_parts)

                try:
                    if not dry_run: final_path.mkdir(parents=True, exist_ok=True)
                    logger.success(f"{op_prefix}–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: '{final_path.relative_to(base_path)}'")
                    created_count += 1
                except OSError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ '{final_path.name}': {e}")
        finally:
            if not stop_event.is_set(): status_callback("–ì–æ—Ç–æ–≤–æ.", 100)
            logger.info(f"--- {op_prefix}–û–ø–µ—Ä–∞—Ü–∏—è '{op_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
        return created_count

    @staticmethod
    def generate_excel_paths(
        base_path_str: str, model_list_str: str, logger: Logger,
        stop_event: threading.Event, status_callback: Callable[[str, int], None],
        result_callback: Callable[[str, str], None]
    ):
        # This function is not refactored with the helper because it has a custom result callback
        op_name = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –¥–ª—è Excel"
        logger.info(f"üìã –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: {op_name}")
        base_path = Path(base_path_str)

        def natural_sort_key(p: Path):
            return [int(text) if text.isdigit() else text.lower() for text in re.split("([0-9]+)", p.name)]

        model_list = [name.strip() for name in model_list_str.strip().split("\n") if name.strip()]
        if not model_list:
            logger.warning("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç.")
            return

        success_output, error_output = [], []
        total_models = len(model_list)
        try:
            for i, model_name in enumerate(model_list):
                if stop_event.is_set(): break
                progress = int((i + 1) / total_models * 100)
                status_callback(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {model_name}", progress)
                model_path = base_path / model_name

                if not model_path.is_dir():
                    error_output.append(f"{model_name} -> –û–®–ò–ë–ö–ê: –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                    logger.error(f"–ü–∞–ø–∫–∞ –¥–ª—è '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
                    continue
                
                try:
                    photo_paths = [p for p in model_path.iterdir() if p.is_file() and p.suffix.lower() in IMAGE_EXTENSIONS]
                except OSError as e:
                    error_output.append(f"{model_name} -> –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É: {e}")
                    continue

                if photo_paths:
                    sorted_paths = sorted(photo_paths, key=natural_sort_key)
                    final_string = f'"[+\n+|'.join(map(str, sorted_paths)) + ']"'
                    success_output.append(final_string)
                    logger.success(f"–ü—É—Ç–∏ –¥–ª—è '{model_name}' ({len(sorted_paths)} —Ñ–æ—Ç–æ) —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                else:
                    error_output.append(f"{model_name} -> –û–®–ò–ë–ö–ê: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    logger.warning(f"–î–ª—è '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        finally:
            result_callback("\n".join(success_output), "\n".join(error_output))
            if not stop_event.is_set(): status_callback("–ì–æ—Ç–æ–≤–æ.", 100)
            logger.info(f"--- –û–ø–µ—Ä–∞—Ü–∏—è '{op_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
            
# --- GUI ---

class App(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title("üóÇÔ∏è –°—É–ø–µ—Ä –°–∫—Ä–∏–ø—Ç v3.0")
        self.geometry("1100x800")
        self.minsize(900, 700)
        self.protocol("WM_DELETE_WINDOW", self._on_closing)

        ctk.set_appearance_mode("System")
        ctk.set_default_color_theme("blue")

        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)

        # --- Backend Init ---
        self.config = ConfigManager.load_config()
        self.size_to_article_map = {}
        self.current_thread = None
        self.stop_event = threading.Event()
        self.operation_result_counter = 0
        
        self._create_widgets()
        self.logger = Logger(self.log_textbox)
        self.load_sizes()
        self.load_configuration()
        self.define_operations()

        self.logger.info("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—É–ø–µ—Ä –°–∫—Ä–∏–ø—Ç v3.0!")
        self.logger.info("üí° –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É, –ø–∞–ø–∫—É –∏ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

    def _create_widgets(self):
        self._create_top_frame()
        self._create_tab_view()
        self._create_bottom_frame()

    def _create_top_frame(self):
        self.top_frame = ctk.CTkFrame(self)
        self.top_frame.grid(row=0, column=0, padx=20, pady=(20, 10), sticky="ew")
        self.top_frame.grid_columnconfigure(1, weight=1)
        
        ctk.CTkLabel(self.top_frame, text="–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞:").grid(row=0, column=0, padx=10, pady=10)
        self.path_var = ctk.StringVar()
        self.path_entry = ctk.CTkEntry(self.top_frame, textvariable=self.path_var, placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å...")
        self.path_entry.grid(row=0, column=1, padx=10, pady=10, sticky="ew")
        self.browse_btn = ctk.CTkButton(self.top_frame, text="–û–±–∑–æ—Ä...", command=self.browse_folder)
        self.browse_btn.grid(row=0, column=2, padx=10, pady=10)

        self.theme_switch = ctk.CTkSwitch(self.top_frame, text="–¢–µ–º–Ω–∞—è —Ç–µ–º–∞", command=self.toggle_theme)
        self.theme_switch.grid(row=0, column=3, padx=10, pady=10)

    def _create_tab_view(self):
        self.tab_view = ctk.CTkTabview(self, anchor="w")
        self.tab_view.grid(row=1, column=0, padx=20, pady=10, sticky="nsew")

        self.tab_view.add("üóÇÔ∏è –§–∞–π–ª–æ–≤—ã–µ –û–ø–µ—Ä–∞—Ü–∏–∏")
        self.tab_view.add("üìã –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ü—É—Ç–µ–π")
        self.tab_view.add("üèóÔ∏è –°–æ–∑–¥–∞—Ç–µ–ª—å –ü–∞–ø–æ–∫")
        self.tab_view.add("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ê—Ä—Ç–∏–∫—É–ª–æ–≤")

        self._populate_file_ops_tab(self.tab_view.tab("üóÇÔ∏è –§–∞–π–ª–æ–≤—ã–µ –û–ø–µ—Ä–∞—Ü–∏–∏"))
        self._populate_path_gen_tab(self.tab_view.tab("üìã –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ü—É—Ç–µ–π"))
        self._populate_folder_creator_tab(self.tab_view.tab("üèóÔ∏è –°–æ–∑–¥–∞—Ç–µ–ª—å –ü–∞–ø–æ–∫"))
        self._populate_article_converter_tab(self.tab_view.tab("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ê—Ä—Ç–∏–∫—É–ª–æ–≤"))

    def _populate_file_ops_tab(self, tab):
        tab.grid_columnconfigure(0, weight=1)
        
        op_frame = ctk.CTkFrame(tab)
        op_frame.grid(row=0, column=0, padx=10, pady=10, sticky="ew")
        op_frame.grid_columnconfigure((0,1), weight=1)

        self.file_op_var = ctk.StringVar(value="")
        ops = [
            ("–ò–∑–≤–ª–µ—á—å –∏–∑ '1'", "extract"), ("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å 1-N", "rename_images"),
            ("–£–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–∑—É/RegEx", "remove_phrase"), ("–£–¥–∞–ª–∏—Ç—å URL-—è—Ä–ª—ã–∫–∏", "delete_urls")
        ]
        for i, (text, value) in enumerate(ops):
            ctk.CTkRadioButton(op_frame, text=text, variable=self.file_op_var, value=value).grid(
                row=i//2, column=i%2, padx=10, pady=5, sticky="w"
            )

        exec_frame = ctk.CTkFrame(tab)
        exec_frame.grid(row=2, column=0, padx=10, pady=10, sticky="ew")
        exec_frame.grid_columnconfigure(0, weight=1)

        self.dry_run_var = ctk.BooleanVar(value=True)
        ctk.CTkCheckBox(exec_frame, text="–ü—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ (Dry Run)", variable=self.dry_run_var).grid(row=0, column=0, padx=10, pady=10, sticky="w")
        self.run_op_button = ctk.CTkButton(exec_frame, text="–í—ã–ø–æ–ª–Ω–∏—Ç—å", command=lambda: self.run_operation(self.file_op_var.get()))
        self.run_op_button.grid(row=0, column=1, padx=10, pady=10, sticky="e")

    def _populate_path_gen_tab(self, tab):
        tab.grid_columnconfigure(0, weight=1)
        tab.grid_rowconfigure(1, weight=1)
        ctk.CTkLabel(tab, text="1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):").grid(row=0, column=0, padx=10, pady=5, sticky="w")
        self.path_gen_input = ctk.CTkTextbox(tab)
        self.path_gen_input.grid(row=1, column=0, padx=10, pady=5, sticky="nsew")
        ctk.CTkButton(tab, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Ç–∏", command=lambda: self.run_operation("generate_paths")).grid(row=2, column=0, padx=10, pady=10, sticky="ew")

        results_frame = ctk.CTkFrame(tab)
        results_frame.grid(row=3, column=0, padx=10, pady=10, sticky="nsew")
        results_frame.grid_columnconfigure(0, weight=1)
        results_frame.grid_rowconfigure(1, weight=1)
        
        self.path_gen_output = ctk.CTkTextbox(results_frame, state="disabled")
        self.path_gen_output.grid(row=1, column=0, padx=10, pady=5, sticky="nsew")
        ctk.CTkButton(results_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ").grid(row=2, column=0, padx=10, pady=10, sticky="e")

    def _populate_folder_creator_tab(self, tab):
        tab.grid_columnconfigure(0, weight=1)
        tab.grid_rowconfigure(1, weight=1)
        ctk.CTkLabel(tab, text="1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):").grid(row=0, column=0, padx=10, pady=5, sticky="w")
        self.folder_creator_input = ctk.CTkTextbox(tab)
        self.folder_creator_input.grid(row=1, column=0, padx=10, pady=5, sticky="nsew")

        options_frame = ctk.CTkFrame(tab)
        options_frame.grid(row=2, column=0, padx=10, pady=10, sticky="ew")
        options_frame.grid_columnconfigure((1,3), weight=1)
        ctk.CTkLabel(options_frame, text="–ü—Ä–µ—Ñ–∏–∫—Å:").grid(row=0, column=0, padx=10, pady=5)
        self.folder_prefix_var = ctk.StringVar()
        ctk.CTkEntry(options_frame, textvariable=self.folder_prefix_var).grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        ctk.CTkLabel(options_frame, text="–°—É—Ñ—Ñ–∏–∫—Å:").grid(row=0, column=2, padx=10, pady=5)
        self.folder_suffix_var = ctk.StringVar()
        ctk.CTkEntry(options_frame, textvariable=self.folder_suffix_var).grid(row=0, column=3, padx=5, pady=5, sticky="ew")
        
        self.folder_numbering_var = ctk.BooleanVar()
        ctk.CTkCheckBox(options_frame, text="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—é", variable=self.folder_numbering_var).grid(row=1, column=0, padx=10, pady=10, sticky="w")

        self.folder_start_num_var = ctk.IntVar(value=1)
        ctk.CTkEntry(options_frame, textvariable=self.folder_start_num_var, width=60).grid(row=1, column=1, padx=5, pady=5)
        self.folder_padding_var = ctk.IntVar(value=2)
        ctk.CTkEntry(options_frame, textvariable=self.folder_padding_var, width=60).grid(row=1, column=2, padx=5, pady=5)

        ctk.CTkButton(tab, text="–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏", command=lambda: self.run_operation("create_folders")).grid(row=3, column=0, padx=10, pady=10, sticky="ew")

    def _populate_article_converter_tab(self, tab):
        tab.grid_columnconfigure(0, weight=1)
        ctk.CTkButton(tab, text="1. –í—ã–±—Ä–∞—Ç—å Excel/CSV —Ñ–∞–π–ª").grid(row=0, column=0, padx=20, pady=20, sticky="ew")
        ctk.CTkLabel(tab, text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω").grid(row=1, column=0, padx=20, pady=5)
        ctk.CTkLabel(tab, text="–ù–∞–π–¥–µ–Ω —Ä–∞–∑–º–µ—Ä –≤ —Ñ–∞–π–ª–µ: -", font=ctk.CTkFont(weight="bold")).grid(row=2, column=0, padx=20, pady=10)
        ctk.CTkLabel(tab, text="2. –í—ã–±–µ—Ä–∏—Ç–µ –ù–û–í–´–ô —Ä–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã:").grid(row=3, column=0, padx=20, pady=10)
        ctk.CTkComboBox(tab, values=[]).grid(row=4, column=0, padx=20, pady=5, sticky="ew")
        ctk.CTkButton(tab, text="3. –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º", state="disabled").grid(row=5, column=0, padx=20, pady=10, sticky="ew")
        ctk.CTkButton(tab, text="‚öôÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤").grid(row=6, column=0, padx=20, pady=20, sticky="ew")

    def _create_bottom_frame(self):
        self.bottom_frame = ctk.CTkFrame(self)
        self.bottom_frame.grid(row=2, column=0, padx=20, pady=(10, 20), sticky="ew")
        self.bottom_frame.grid_columnconfigure(0, weight=1)

        self.log_textbox = ctk.CTkTextbox(self.bottom_frame, state="disabled", height=150)
        self.log_textbox.grid(row=0, column=0, columnspan=2, padx=10, pady=5, sticky="ew")
        
        self.progress_bar = ctk.CTkProgressBar(self.bottom_frame)
        self.progress_bar.set(0)
        self.progress_bar.grid(row=1, column=0, padx=10, pady=10, sticky="ew")

        self.stop_btn = ctk.CTkButton(self.bottom_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", state="disabled", command=self.stop_operation)
        self.stop_btn.grid(row=1, column=1, padx=10, pady=10)

    # --- Backend and UI Logic ---

    def define_operations(self):
        """Defines all available operations in a structured dictionary."""
        self.operations = {
            "extract": {
                "name": "–ò–∑–≤–ª–µ—á—å –∏–∑ –ø–∞–ø–æ–∫ '1'",
                "function": FileOperations.organize_folders,
                "get_args": lambda: (self.path_var.get(), self.logger, self.stop_event, self.update_status, self.dry_run_var.get()),
            },
            "rename_images": {
                "name": "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 1-N",
                "function": FileOperations.rename_images_sequentially,
                "get_args": lambda: (self.path_var.get(), self.logger, self.stop_event, self.update_status, self.dry_run_var.get()),
            },
            "create_folders": {
                "name": "–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫",
                "function": FileOperations.create_folders_from_list,
                "get_args": lambda: (
                    self.path_var.get(), self.folder_creator_input.get("1.0", "end-1c"),
                    self.folder_prefix_var.get(), self.folder_suffix_var.get(),
                    self.folder_numbering_var.get(), self.folder_start_num_var.get(), self.folder_padding_var.get(),
                    self.logger, self.stop_event, self.update_status, self.dry_run_var.get()
                ),
            },
            "generate_paths": {
                "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –¥–ª—è Excel",
                "function": FileOperations.generate_excel_paths,
                "get_args": lambda: (
                    self.path_var.get(), self.path_gen_input.get("1.0", "end-1c"), self.logger, self.stop_event,
                    self.update_status, self.path_gen_result_callback
                ),
            },
        }

    def load_configuration(self):
        self.path_var.set(self.config.get("last_path", str(Path.home())))
        if self.config.get("theme", "dark") == "dark":
            self.theme_switch.select()
            ctk.set_appearance_mode("dark")
        else:
            self.theme_switch.deselect()
            ctk.set_appearance_mode("light")

    def load_sizes(self):
        if not SIZES_JSON_FILE.exists():
            self.size_to_article_map = DEFAULT_SIZES
            self.save_sizes()
        else:
            try:
                with open(SIZES_JSON_FILE, "r", encoding="utf-8") as f:
                    self.size_to_article_map = json.load(f)
            except (json.JSONDecodeError, FileNotFoundError):
                self.logger.error("Could not load sizes file, using defaults.")
                self.size_to_article_map = DEFAULT_SIZES

    def save_sizes(self):
        try:
            APP_CONFIG_DIR.mkdir(parents=True, exist_ok=True)
            with open(SIZES_JSON_FILE, "w", encoding="utf-8") as f:
                json.dump(self.size_to_article_map, f, ensure_ascii=False, indent=4)
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")

    def browse_folder(self):
        initial_dir = self.path_var.get() if Path(self.path_var.get()).is_dir() else str(Path.home())
        folder_selected = filedialog.askdirectory(initialdir=initial_dir)
        if folder_selected:
            self.path_var.set(folder_selected)

    def toggle_theme(self):
        mode = "dark" if self.theme_switch.get() == 1 else "light"
        ctk.set_appearance_mode(mode)

    def update_status(self, message: str, progress: Optional[int] = None):
        if progress is not None:
            self.progress_bar.set(progress / 100)
        # TODO: Add a status label if desired

    def stop_operation(self):
        if self.current_thread and self.current_thread.is_alive():
            self.stop_event.set()
            self.logger.warning("--- –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é... ---")
            self.stop_btn.configure(state="disabled")

    def run_operation(self, op_type: str):
        if self.current_thread and self.current_thread.is_alive():
            ctk.messagebox.showwarning("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "–î—Ä—É–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
            return

        op_details = self.operations.get(op_type)
        if not op_details:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {op_type}")
            return

        def operation_wrapper():
            self.stop_event.clear()
            self.stop_btn.configure(state="normal")
            args = op_details["get_args"]()
            result = op_details["function"](*args)
            if isinstance(result, int):
                self.operation_result_counter = result

            self.stop_btn.configure(state="disabled")
            if not self.stop_event.is_set():
                self.logger.success("üéâ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        self.current_thread = threading.Thread(target=operation_wrapper, daemon=True)
        self.current_thread.start()

    def path_gen_result_callback(self, success_str: str, error_str: str):
        self.path_gen_output.configure(state="normal")
        self.path_gen_output.delete("1.0", "end")
        self.path_gen_output.insert("1.0", success_str)
        self.path_gen_output.configure(state="disabled")
        # TODO: Add error output box

    def _on_closing(self):
        # Save config on exit
        self.config["last_path"] = self.path_var.get()
        self.config["theme"] = "dark" if self.theme_switch.get() == 1 else "light"
        ConfigManager.save_config(self.config)
        self.destroy()


if __name__ == "__main__":
    app = App()
    app.mainloop()
