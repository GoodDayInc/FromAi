import os
import shutil
import re
import threading
from pathlib import Path
from typing import Callable

# This will be created shortly in utils/logger.py
from utils.logger import Logger

IMAGE_EXTENSIONS = [
    ".jpg", ".jpeg", ".png", ".bmp", ".gif", ".tiff", ".webp", ".svg", ".ico"
]


class FileOperations:
    """A collection of static methods for performing file system operations."""

    @staticmethod
    def _sanitize_folder_path(path: str) -> str:
        """Removes illegal characters from a path segment."""
        parts = re.split(r"[\\/]", path)
        sanitized_parts = [re.sub(r'[?:"<>|*]', "", part).strip() for part in parts]
        return os.path.join(*[p for p in sanitized_parts if p])

    @staticmethod
    def create_folders_from_list(
        base_path: str,
        folder_list_str: str,
        prefix: str,
        suffix: str,
        use_numbering: bool,
        start_num: int,
        padding: int,
        logger: Logger,
        stop_event: threading.Event,
        status_callback: Callable[[str, int], None],
        dry_run: bool = False,
    ) -> int:
        op_name = "[DRY RUN] " if dry_run else ""
        logger.info(f"{op_name}üèóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫")
        if not dry_run:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫–∏ –Ω–∞ –¥–∏—Å–∫–µ!")
        logger.info(f"–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_path}")

        folder_names = [
            name.strip() for name in folder_list_str.strip().split("\n") if name.strip()
        ]
        if not folder_names:
            logger.warning("–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
            status_callback("–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø—É—Å—Ç.", 0)
            return 0

        total_folders = len(folder_names)
        created_count = 0

        try:
            for i, name in enumerate(folder_names):
                if stop_event.is_set():
                    logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    status_callback("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.", 0)
                    break

                progress = int((i + 1) / total_folders * 100)
                status_callback(f"{op_name}–°–æ–∑–¥–∞–Ω–∏–µ: {name}", progress)

                sanitized_path = FileOperations._sanitize_folder_path(name)
                if not sanitized_path:
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –∏–º—è '{name}' —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
                    continue

                number_str = str(i + start_num).zfill(padding) + "_" if use_numbering else ""

                path_parts = list(os.path.split(sanitized_path))
                path_parts[-1] = f"{prefix}{number_str}{path_parts[-1]}{suffix}"
                final_name = os.path.join(*path_parts)

                full_path = os.path.join(base_path, final_name)

                try:
                    if not dry_run:
                        os.makedirs(full_path, exist_ok=True)
                    logger.success(f"{op_name}–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: '{final_name}'")
                    created_count += 1
                except OSError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ '{final_name}': {e}")

            if created_count > 0:
                logger.success(f"‚úÖ {op_name}–û–ø–µ—Ä–∞—Ü–∏—è '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {created_count} –ø–∞–ø–æ–∫.")
            else:
                logger.warning(f"{op_name}–ù–∏ –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ.")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: {e}")
            status_callback("–û—à–∏–±–∫–∞!", 0)
        finally:
            if not stop_event.is_set():
                status_callback("–ì–æ—Ç–æ–≤–æ.", 100)
            logger.info(f"--- {op_name}–û–ø–µ—Ä–∞—Ü–∏—è '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")

        return created_count

    @staticmethod
    def generate_excel_paths(
        base_path: str,
        model_list_str: str,
        logger: Logger,
        stop_event: threading.Event,
        status_callback: Callable[[str, int], None],
        result_callback: Callable[[str, str], None],
    ):
        logger.info("üìã –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –¥–ª—è Excel (–ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫)")
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å: {base_path}")

        def natural_sort_key(s: str):
            return [
                int(text) if text.isdigit() else text.lower()
                for text in re.split("([0-9]+)", os.path.basename(s))
            ]

        model_list = [name.strip() for name in model_list_str.strip().split("\n") if name.strip()]
        if not model_list:
            logger.warning("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
            status_callback("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç.", 0)
            result_callback("", "")
            return

        total_models = len(model_list)
        success_output, error_output = [], []
        try:
            for i, model_name in enumerate(model_list):
                if stop_event.is_set():
                    logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    status_callback("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.", 0)
                    break

                progress = int((i + 1) / total_models * 100)
                status_callback(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {model_name}", progress)
                model_path = os.path.join(base_path, model_name)

                if not os.path.isdir(model_path):
                    error_output.append(f"{model_name} -> –û–®–ò–ë–ö–ê: –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                    logger.error(f"–ü–∞–ø–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {model_path}")
                    continue

                photo_paths = []
                try:
                    for filename in os.listdir(model_path):
                        if os.path.splitext(filename)[1].lower() in IMAGE_EXTENSIONS:
                            full_path = os.path.join(model_path, filename)
                            if os.path.isfile(full_path):
                                photo_paths.append(full_path)
                except OSError as e:
                    error_output.append(f"{model_name} -> –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É: {e}")
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è '{model_name}': {e}")
                    continue

                if photo_paths:
                    sorted_paths = sorted(photo_paths, key=natural_sort_key)
                    joined_paths = "|".join(sorted_paths)
                    final_string = f'"[+\n+{joined_paths}]"'
                    success_output.append(final_string)
                    logger.success(f"–ü—É—Ç–∏ –¥–ª—è '{model_name}' ({len(sorted_paths)} —Ñ–æ—Ç–æ) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                else:
                    error_output.append(f"{model_name} -> –û–®–ò–ë–ö–ê: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ.")
                    logger.warning(f"–î–ª—è –º–æ–¥–µ–ª–∏ '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ.")

            result_callback("\n".join(success_output), "\n".join(error_output))

            if not stop_event.is_set():
                logger.success("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                status_callback("–ì–æ—Ç–æ–≤–æ.", 100)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É—Ç–µ–π: {e}")
            status_callback("–û—à–∏–±–∫–∞!", 0)
        finally:
            logger.info("--- –û–ø–µ—Ä–∞—Ü–∏—è '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –¥–ª—è Excel' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")

    @staticmethod
    def organize_folders(
        root_path: str,
        logger: Logger,
        stop_event: threading.Event,
        status_callback: Callable[[str, int], None],
        dry_run: bool = False,
    ) -> int:
        op_name = "[DRY RUN] " if dry_run else ""
        logger.info(f"{op_name}üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–æ–∫ '1'")
        if not dry_run:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤!")
        logger.info(f"–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root_path}")

        processed_count = 0
        found_folders = False
        try:
            all_dirs = [dp for dp, dn, _ in os.walk(root_path) if "1" in dn]
            total_dirs = len(all_dirs)

            for i, dirpath in enumerate(sorted(all_dirs, key=lambda x: x.count(os.sep), reverse=True)):
                if stop_event.is_set():
                    logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    status_callback("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.", 0)
                    return processed_count

                progress = int((i + 1) / total_dirs * 100) if total_dirs > 0 else 0
                folder_1_path = os.path.join(dirpath, "1")
                parent_path = dirpath

                logger.info(f"{op_name}üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: {folder_1_path}")
                status_callback(f"{op_name}–û–±—Ä–∞–±–æ—Ç–∫–∞: {os.path.relpath(folder_1_path, root_path)}", progress)
                found_folders = True

                try:
                    items_in_folder_1 = os.listdir(folder_1_path)
                except OSError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {folder_1_path}: {e}")
                    continue

                if items_in_folder_1:
                    logger.info(f"{op_name}–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ {len(items_in_folder_1)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ '{folder_1_path}' –≤ '{parent_path}'...")
                    for item_name in items_in_folder_1:
                        if stop_event.is_set():
                            logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.")
                            status_callback("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.", 0)
                            return processed_count

                        src_item_path = os.path.join(folder_1_path, item_name)
                        dst_item_path = os.path.join(parent_path, item_name)

                        if os.path.exists(dst_item_path):
                            logger.warning(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –§–∞–π–ª/–ø–∞–ø–∫–∞ '{item_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ '{parent_path}'. –ü—Ä–æ–ø—É—Å–∫.")
                            continue
                        try:
                            if not dry_run:
                                shutil.move(src_item_path, dst_item_path)
                            logger.success(f"{op_name}–ü–µ—Ä–µ–º–µ—â–µ–Ω: '{item_name}'")
                        except OSError as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è '{item_name}': {e}")

                try:
                    if not os.listdir(folder_1_path):
                        if not dry_run:
                            os.rmdir(folder_1_path)
                        logger.success(f"{op_name}–£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞: {folder_1_path}")
                        processed_count += 1
                    else:
                        logger.warning(f"–ü–∞–ø–∫–∞ '{folder_1_path}' –Ω–µ –ø—É—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è. –ù–µ —É–¥–∞–ª–µ–Ω–∞.")
                except OSError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ '{folder_1_path}': {e}")

            if not found_folders:
                logger.warning("–ü–∞–ø–∫–∏ —Å –∏–º–µ–Ω–µ–º '1' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –µ–µ –ø–æ–¥–ø–∞–ø–∫–∞—Ö.")
            elif processed_count > 0:
                logger.success(f"‚úÖ {op_name}–û–ø–µ—Ä–∞—Ü–∏—è '–ò–∑–≤–ª–µ—á—å –∏–∑ –ø–∞–ø–æ–∫ 1' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫ '1': {processed_count}.")
            else:
                logger.warning(f"{op_name}–ü–∞–ø–∫–∏ '1' –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤).")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ '–ò–∑–≤–ª–µ—á—å –∏–∑ –ø–∞–ø–æ–∫ 1': {e}")
            status_callback("–û—à–∏–±–∫–∞!", 0)
        finally:
            if not stop_event.is_set():
                status_callback("–ì–æ—Ç–æ–≤–æ.", 100)
            logger.info(f"--- {op_name}–û–ø–µ—Ä–∞—Ü–∏—è '–ò–∑–≤–ª–µ—á—å –∏–∑ –ø–∞–ø–æ–∫ 1' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
        return processed_count

    @staticmethod
    def rename_images_sequentially(
        directory: str,
        logger: Logger,
        stop_event: threading.Event,
        status_callback: Callable[[str, int], None],
        dry_run: bool = False,
    ) -> int:
        op_name = "[DRY RUN] " if dry_run else ""
        logger.info(f"{op_name}üî¢ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (1-N)")
        if not dry_run:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤!")
        logger.info(f"–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

        total_renamed_files = 0
        processed_folders = 0
        try:
            subdirs = [
                root for root, _, files in os.walk(directory)
                if any(os.path.splitext(f)[1].lower() in IMAGE_EXTENSIONS for f in files)
            ]
            total_dirs = len(subdirs)

            for i, root in enumerate(subdirs):
                if stop_event.is_set():
                    logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    status_callback("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.", 0)
                    return total_renamed_files

                progress = int((i + 1) / total_dirs * 100) if total_dirs > 0 else 0
                image_files = sorted([
                    f for f in os.listdir(root)
                    if os.path.isfile(os.path.join(root, f)) and os.path.splitext(f)[1].lower() in IMAGE_EXTENSIONS
                ])

                if not image_files:
                    continue

                processed_folders += 1
                rel_root = os.path.relpath(root, directory) or "."
                logger.info(f"{op_name}üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É: {rel_root}")
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
                status_callback(f"{op_name}–û–±—Ä–∞–±–æ—Ç–∫–∞: {rel_root}", progress)

                renamed_in_folder = 0
                for index, filename in enumerate(image_files, 1):
                    if stop_event.is_set():
                        logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
                        status_callback("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.", 0)
                        return total_renamed_files

                    old_path = os.path.join(root, filename)
                    extension = os.path.splitext(filename)[1].lower()
                    new_filename = f"{index}{extension}"
                    new_path = os.path.join(root, new_filename)

                    if old_path == new_path:
                        logger.info(f"–§–∞–π–ª '{filename}' —É–∂–µ –∏–º–µ–µ—Ç —Ü–µ–ª–µ–≤–æ–µ –∏–º—è. –ü—Ä–æ–ø—É—Å–∫.")
                        continue

                    if os.path.exists(new_path):
                        # Handle conflicts by adding a suffix
                        base, ext = os.path.splitext(new_filename)
                        conflict_count = 1
                        while os.path.exists(new_path):
                            new_filename_conflict = f"{base}_conflict_{conflict_count}{ext}"
                            new_path = os.path.join(root, new_filename_conflict)
                            conflict_count += 1
                            if conflict_count > 100:
                                logger.error(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–ª—è {new_filename}. –ü—Ä–æ–ø—É—Å–∫ {filename}.")
                                new_path = None
                                break
                        if new_path is None:
                            continue
                        logger.warning(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–ª—è '{new_filename}'. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é –≤ '{os.path.basename(new_path)}'.")

                    try:
                        if not dry_run:
                            os.rename(old_path, new_path)
                        logger.success(f"{op_name}–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: '{filename}' ‚Üí '{os.path.basename(new_path)}'")
                        total_renamed_files += 1
                        renamed_in_folder += 1
                    except OSError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è '{filename}': {e}")

                logger.info(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ –ø–∞–ø–∫–µ: {renamed_in_folder} —Ñ–∞–π–ª–æ–≤.")

            if processed_folders == 0:
                logger.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                logger.success(f"‚úÖ {op_name}–û–ø–µ—Ä–∞—Ü–∏—è '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {total_renamed_files} —Ñ–∞–π–ª–æ–≤ –≤ {processed_folders} –ø–∞–ø–∫–∞—Ö.")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': {e}")
            status_callback("–û—à–∏–±–∫–∞!", 0)
        finally:
            if not stop_event.is_set():
                status_callback("–ì–æ—Ç–æ–≤–æ.", 100)
            logger.info(f"--- {op_name}–û–ø–µ—Ä–∞—Ü–∏—è '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
        return total_renamed_files

    @staticmethod
    def remove_phrase_from_names(
        base_path_str: str,
        phrase: str,
        logger: Logger,
        stop_event: threading.Event,
        status_callback: Callable[[str, int], None],
        case_sensitive: bool,
        use_regex: bool,
        dry_run: bool = False,
    ) -> int:
        op_name = "[DRY RUN] " if dry_run else ""
        logger.info(f"{op_name}‚úÇÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã/—à–∞–±–ª–æ–Ω–∞ '{phrase}'")
        if not dry_run:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫!")
        logger.info(f"–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_path_str}")
        logger.info(f"–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä: {'–î–∞' if case_sensitive else '–ù–µ—Ç'} | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RegEx: {'–î–∞' if use_regex else '–ù–µ—Ç'}")

        if not phrase:
            logger.error("–§—Ä–∞–∑–∞/—à–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
            status_callback("–û—à–∏–±–∫–∞: –ü—É—Å—Ç–∞—è —Ñ—Ä–∞–∑–∞.", 0)
            return 0

        try:
            pattern = re.compile(phrase, 0 if case_sensitive else re.IGNORECASE) if use_regex else None
        except re.error as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            status_callback("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π RegEx!", 0)
            return 0

        processed_count = 0
        base_path = Path(base_path_str)
        try:
            # Get all items and sort by depth (deepest first) to avoid renaming parent before child
            items_to_process = sorted(list(base_path.rglob("*")), key=lambda p: len(str(p)), reverse=True)
            total_items = len(items_to_process)

            for i, item_path in enumerate(items_to_process):
                if stop_event.is_set():
                    logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    status_callback("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.", 0)
                    return processed_count

                progress = int((i + 1) / total_items * 100) if total_items > 0 else 0
                status_callback(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {item_path.name}", progress)

                original_name = item_path.name

                if use_regex:
                    target_name_candidate = pattern.sub("", original_name).strip()
                else:
                    # Simple string replacement
                    if case_sensitive:
                        target_name_candidate = original_name.replace(phrase, "").strip()
                    else:
                        # Case-insensitive replacement
                        target_name_candidate = re.sub(re.escape(phrase), "", original_name, flags=re.IGNORECASE).strip()

                if not target_name_candidate:
                    if item_path.is_file() and item_path.suffix:
                        target_name_candidate = f"renamed_file{item_path.suffix}"
                        logger.warning(f"–ò–º—è —Ñ–∞–π–ª–∞ '{original_name}' —Å—Ç–∞–ª–æ –±—ã –ø—É—Å—Ç—ã–º. –ë—É–¥–µ—Ç '{target_name_candidate}'.")
                    elif item_path.is_dir():
                        target_name_candidate = "renamed_folder"
                        logger.warning(f"–ò–º—è –ø–∞–ø–∫–∏ '{original_name}' —Å—Ç–∞–ª–æ –±—ã –ø—É—Å—Ç—ã–º. –ë—É–¥–µ—Ç '{target_name_candidate}'.")
                    else:
                        logger.warning(f"–ü—Ä–æ–ø—É—Å–∫: –ò–º—è '{original_name}' —Å—Ç–∞–ª–æ –±—ã –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è.")
                        continue

                if target_name_candidate == original_name:
                    continue

                new_path = item_path.parent / target_name_candidate

                # Skip if a file/folder with the new name already exists
                if new_path.exists():
                    logger.warning(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç: '{new_path}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è '{original_name}'.")
                    continue

                try:
                    if not dry_run:
                        item_path.rename(new_path)
                    logger.success(f"{op_name}–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: '{original_name}' ‚Üí '{target_name_candidate}'")
                    processed_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è '{original_name}' –≤ '{target_name_candidate}': {e}")

            if processed_count == 0:
                logger.warning("–§—Ä–∞–∑–∞/—à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞–ø–∫–∏.")
            else:
                logger.success(f"‚úÖ {op_name}–û–ø–µ—Ä–∞—Ü–∏—è '–£–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–∑—É' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {processed_count}.")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ '–£–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–∑—É': {e}")
            status_callback("–û—à–∏–±–∫–∞!", 0)
        finally:
            if not stop_event.is_set():
                status_callback("–ì–æ—Ç–æ–≤–æ.", 100)
            logger.info(f"--- {op_name}–û–ø–µ—Ä–∞—Ü–∏—è '–£–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–∑—É: {phrase}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
        return processed_count

    @staticmethod
    def delete_url_shortcuts(
        base_path_str: str,
        names_to_delete_str: str,
        logger: Logger,
        stop_event: threading.Event,
        status_callback: Callable[[str, int], None],
        case_sensitive: bool = False,
        dry_run: bool = False,
    ) -> int:
        op_name = "[DRY RUN] " if dry_run else ""
        logger.info(f"{op_name}üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: –£–¥–∞–ª–µ–Ω–∏–µ URL-—è—Ä–ª—ã–∫–æ–≤")
        if not dry_run:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã!")
        logger.info(f"–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {base_path_str}")
        logger.info(f"–ò–º–µ–Ω–∞/—á–∞—Å—Ç–∏ –∏–º–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: '{names_to_delete_str}'")
        logger.info(f"–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä: {'–î–∞' if case_sensitive else '–ù–µ—Ç'}")

        names_list_raw = [name.strip() for name in names_to_delete_str.split(",") if name.strip()]
        if not names_list_raw:
            logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω—ã –∏–º–µ–Ω–∞ –∏–ª–∏ —á–∞—Å—Ç–∏ –∏–º–µ–Ω —è—Ä–ª—ã–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            status_callback("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∏–º–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.", 0)
            return 0

        names_list = names_list_raw if case_sensitive else [name.lower() for name in names_list_raw]
        deleted_count = 0
        base_path = Path(base_path_str)

        try:
            url_files = list(base_path.rglob("*.url"))
            total_files = len(url_files)

            for i, file_path in enumerate(url_files):
                if stop_event.is_set():
                    logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    status_callback("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.", 0)
                    return deleted_count

                progress = int((i + 1) / total_files * 100) if total_files > 0 else 0
                status_callback(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {file_path.name}", progress)

                file_name_to_check = file_path.stem if case_sensitive else file_path.stem.lower()

                if any(target_name in file_name_to_check for target_name in names_list):
                    try:
                        if not dry_run:
                            file_path.unlink()
                        logger.success(f"{op_name}–£–¥–∞–ª–µ–Ω —è—Ä–ª—ã–∫: '{file_path}'")
                        deleted_count += 1
                    except OSError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —è—Ä–ª—ã–∫–∞ '{file_path}': {e}")

            if deleted_count == 0:
                logger.warning("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—è—Ä–ª—ã–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                logger.success(f"‚úÖ {op_name}–û–ø–µ—Ä–∞—Ü–∏—è '–£–¥–∞–ª–∏—Ç—å URL-—è—Ä–ª—ã–∫–∏' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ —è—Ä–ª—ã–∫–æ–≤: {deleted_count}.")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ '–£–¥–∞–ª–∏—Ç—å URL-—è—Ä–ª—ã–∫–∏': {e}")
            status_callback("–û—à–∏–±–∫–∞!", 0)
        finally:
            if not stop_event.is_set():
                status_callback("–ì–æ—Ç–æ–≤–æ.", 100)
            logger.info(f"--- {op_name}–û–ø–µ—Ä–∞—Ü–∏—è '–£–¥–∞–ª–∏—Ç—å URL-—è—Ä–ª—ã–∫–∏ –ø–æ –∏–º–µ–Ω–∞–º: {names_to_delete_str}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
        return deleted_count
